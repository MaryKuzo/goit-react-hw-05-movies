{"version":3,"file":"static/js/296.2c6345b9.chunk.js","mappings":"mQAEaA,EAAgBC,EAAAA,EAAAA,IAAH,6CAIbC,EAAYD,EAAAA,EAAAA,GAAH,qKAQTE,EAAYF,EAAAA,EAAAA,GAAH,qEAKTG,EAAaH,EAAAA,EAAAA,IAAH,oFAMVI,EAAYJ,EAAAA,EAAAA,GAAH,+DAKTK,EAAYL,EAAAA,EAAAA,EAAH,4DAITM,EAAgBN,EAAAA,EAAAA,KAAH,uCAGbO,EAAeP,EAAAA,EAAAA,IAAH,mG,SC+BzB,EAnDa,WACX,OAAwBQ,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaH,GACVI,MAAK,SAAAC,GACJN,EAAQM,GACRC,QAAQC,IAAIF,EACb,IACAG,OAAM,SAAAC,GAAK,OAAIH,QAAQG,MAAMA,EAAlB,GACf,GAAE,CAACT,IAECF,GAKH,SAACV,EAAD,UACGU,EAAKY,OAAS,GACb,SAACpB,EAAD,UACGQ,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACR,UAACxB,EAAD,WACGuB,GACC,SAACtB,EAAD,CACEwB,IAAG,0CAAqCF,GACxCG,IAAKJ,KAGP,SAACjB,EAAD,CAAcoB,I,i1FAAwBC,IAAI,wBAG5C,SAACxB,EAAD,UAAYoB,KACZ,UAACnB,EAAD,WAAW,eAAW,SAACC,EAAD,UAAgBoB,SAXxBH,EADR,OAiBZ,yBAAK,qBAxBF,IA4BV,C,mMCzDKM,EAAM,mCACNC,EAAW,gCAEV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6FACCC,EADD,UACUF,EADV,sCACgDD,EADhD,4BAEkBI,EAAAA,EAAAA,IAAUD,GAF5B,cAECE,EAFD,yBAGEA,EAASlB,MAHX,kEAOA,SAAemB,EAAtB,+CAAO,OAAP,oBAAO,WAA6BZ,GAA7B,gFACCS,EADD,UACUF,EADV,iBAC2BP,EAD3B,oBACyCM,EADzC,4BAEkBI,EAAAA,EAAAA,IAAUD,GAF5B,cAECE,EAFD,yBAGEA,EAASlB,MAHX,kEAMA,SAAeoB,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,gFACCL,EADD,UACUF,EADV,gCAC0CD,EAD1C,kBACuDQ,EADvD,4BAEkBJ,EAAAA,EAAAA,IAAUD,GAF5B,cAECE,EAFD,yBAGEA,GAHF,kEAMA,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BS,GAA5B,gFACCS,EADD,UACUF,EADV,iBAC2BP,EAD3B,4BACiDM,EADjD,4BAEkBI,EAAAA,EAAAA,IAAUD,GAF5B,cAECE,EAFD,yBAGEA,EAASlB,KAAKP,MAHhB,kEAMA,SAAe6B,EAAtB,+CAAO,OAAP,oBAAO,WAA8Bf,GAA9B,gFACCS,EADD,UACUF,EADV,iBAC2BP,EAD3B,4BACiDM,EADjD,4BAEkBI,EAAAA,EAAAA,IAAUD,GAF5B,cAECE,EAFD,yBAGEA,EAASlB,KAAKuB,SAHhB,kE","sources":["pages/Cast/Cast.styled.jsx","pages/Cast/Cast.jsx","services/FetchApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastContainer = styled.div`\n  margin-top: 20px;\n`;\n\nexport const ActorList = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n  padding-left: 20px;\n`;\n\nexport const ActorCard = styled.li`\n  border: 1px solid #ccc;\n  padding: 10px;\n`;\n\nexport const ActorImage = styled.img`\n  width: 100%;\n  max-height: 300px;\n  object-fit: cover;\n`;\n\nexport const ActorName = styled.h3`\n  font-size: 18px;\n  margin: 10px 0;\n`;\n\nexport const Character = styled.p`\n  font-size: 16px;\n  color: #555;\n`;\nexport const CharacterSpan = styled.span`\ncolor:#D43369\n`\nexport const DefaultImage = styled.img`\n  width: 100%;\n  height: 300px;\n  object-fit: cover;\n  opacity: 0.7;\n\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/FetchApi';\nimport PropTypes from 'prop-types';\nimport {\n  CastContainer,\n  ActorList,\n  ActorCard,\n  ActorImage,\n  ActorName,\n  Character,\n  CharacterSpan,\n  DefaultImage\n} from './Cast.styled';\nimport DefaultActorImage from './default.png';\n\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieCast(movieId)\n      .then(data => {\n        setCast(data);\n        console.log(data);\n      })\n      .catch(error => console.error(error));\n  }, [movieId]);\n\n  if (!cast) {\n    return null;\n  }\n\n  return (\n    <CastContainer>\n      {cast.length > 0 ? (\n        <ActorList>\n          {cast.map(({ id, name, profile_path, character }) => (\n            <ActorCard key={id}>\n              {profile_path ? (\n                <ActorImage\n                  src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                  alt={name}\n                />\n              ) : (\n                <DefaultImage src={DefaultActorImage} alt=\"No image available\" />\n\n              )}\n              <ActorName>{name}</ActorName>\n              <Character>Character: <CharacterSpan>{character}</CharacterSpan></Character>\n            </ActorCard>\n          ))}\n        </ActorList>\n      ) : (\n        <div>No actors here</div>\n      )}\n    </CastContainer>\n  );\n};\n\nCast.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  profile_path: PropTypes.string,\n  character: PropTypes.string\n};\n\nexport default Cast;\n","import axios from \"axios\";\n\nconst KEY = 'd79036dd91636485f959ac267909ee3a';\nconst BASE_URL = 'https://api.themoviedb.org/3/'\n\nexport async function getTrandingMovies () {\n  const url = `${BASE_URL}trending/movie/day?api_key=${KEY}&language=en-US`;\n  const response = await axios.get(url)\n  return response.data\n\n}\n\nexport async function getMoviesById(id) {\n  const url = `${BASE_URL}movie/${id}?api_key=${KEY}&language=en-US`;\n  const response = await axios.get(url);\n  return response.data;\n}\n\nexport async function getMoviesQuery(query) {\n  const url = `${BASE_URL}search/movie?api_key=${KEY}&query=${query}&language=en-US`;\n  const response = await axios.get(url);\n  return response\n}\n\nexport async function getMovieCast(id) {\n  const url = `${BASE_URL}movie/${id}/credits?api_key=${KEY}&language=en-US`;\n  const response = await axios.get(url);\n  return response.data.cast;\n}\n\nexport async function getMovieReview(id) {\n  const url = `${BASE_URL}movie/${id}/reviews?api_key=${KEY}&language=en-US`;\n  const response = await axios.get(url);\n  return response.data.results;\n}\n"],"names":["CastContainer","styled","ActorList","ActorCard","ActorImage","ActorName","Character","CharacterSpan","DefaultImage","useState","cast","setCast","movieId","useParams","useEffect","getMovieCast","then","data","console","log","catch","error","length","map","id","name","profile_path","character","src","alt","KEY","BASE_URL","getTrandingMovies","url","axios","response","getMoviesById","getMoviesQuery","query","getMovieReview","results"],"sourceRoot":""}